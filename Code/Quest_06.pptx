CREATE TYPE MEMBRO_TYPE AS OBJECT(
    cpf     INTEGER,
    nome    VARCHAR2(30),
    sexo    CHAR(1),
    nasc    DATE
);

ALTER TYPE MEMBRO_TYPE NOT FINAL;

CREATE TYPE DOCENTE_TYPE UNDER MEMBRO_TYPE(
    siape   INTEGER,
    admiss  DATE
);

CREATE TYPE DISCENTE_TYPE UNDER MEMBRO_TYPE(
    matricula   INTEGER,
    curso       VARCHAR2(20)
);

CREATE TABLE MEMBRO_TAB OF MEMBRO_TYPE;

ALTER TABLE MEMBRO_TAB ADD CONSTRAINT PK_CPF_MEMBRO PRIMARY KEY(cpf);

DECLARE
memb1 DOCENTE_TYPE;
memb2 DOCENTE_TYPE;
memb3 DISCENTE_TYPE;
memb4 DISCENTE_TYPE;
BEGIN
memb1 := NEW DOCENTE_TYPE(73635526728, 'PEDRO', 'M', '11/01/1972', 1477839, '11/01/1996');
memb2 := NEW DOCENTE_TYPE(11165527828, 'JOANA', 'F', '10/10/1962', 8276151, '12/11/2000');
memb3 := NEW DISCENTE_TYPE(73688876721, 'SANDRA', 'F', '11/01/2000', 201928726, 'COMPUTACAO');
memb4 := NEW DISCENTE_TYPE(22225526726, 'RENATO', 'M', '03/06/1999', 202018736, 'ELETRICA');

INSERT INTO MEMBRO_TAB VALUES(memb1)
INSERT INTO MEMBRO_TAB VALUES(memb2);
INSERT INTO MEMBRO_TAB VALUES(memb3);
INSERT INTO MEMBRO_TAB VALUES(memb4);
END;

ALTER TYPE MEMBRO_TYPE ADD MEMBER FUNCTION calcula_idade RETURN INTEGER CASCADE;

CREATE OR REPLACE TYPE BODY MEMBRO_TYPE AS
    MEMBER FUNCTION calcula_idade RETURN INTEGER
    IS
    idade INTEGER;
    BEGIN
        idade := TRUNC((SYSDATE - SELF.nasc)/365);
        RETURN(idade);
    END;
END;

--Irá mostrar a idade cronológica de todos
SELECT M.calcula_idade() FROM MEMBRO_TAB M;

ALTER TYPE DOCENTE_TYPE ADD OVERRIDING MEMBER FUNCTION calcula_idade RETURN INTEGER CASCADE;

CREATE OR REPLACE TYPE BODY DOCENTE_TYPE AS
    OVERRIDING MEMBER FUNCTION calcula_idade RETURN INTEGER
    IS
    idade_trabalho INTEGER;
    BEGIN
        idade_trabalho := TRUNC((SYSDATE - SELF.admiss)/365);
        RETURN(idade_trabalho);
    END;
END;

--Irá mostrar a idade de trabalho dos docentes e a idade cronológica dos não docentes
SELECT M.calcula_idade() FROM MEMBRO_TAB M;